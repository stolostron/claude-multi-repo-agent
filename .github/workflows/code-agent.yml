name: Code Agent Issue Processor

on:
  issues:
    types: [opened, reopened]

permissions:
  contents: write # Needed to checkout code, create branch, push changes, create PR
  pull-requests: write # Needed to create PR
  issues: write # Needed to comment on the issue

# Global environment variables for model selection
env:
  MODS_MODEL: gpt-4o
  CODEX_MODEL: anthropic/claude-3.7-sonnet # The model to use for codex (can be changed globally)
  CODEX_PROVIDER: openrouter

jobs:
  process-issue:
    runs-on: ubuntu-latest
    if: contains('["xuezhaojun", "zhujian7", "qiujian16", "zhiweiyin318", "haoqing0110", "elgnay"]', github.event.issue.user.login)
    steps:
      - name: Get Issue Details
        id: issue_details
        run: |
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "ISSUE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.issue.body }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "ISSUE_AUTHOR=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Extract checked repositories
        id: extract_information
        run: |
          # Extract checked repositories from the issue body as a JSON array
          REPOS=$(echo "${{ steps.issue_details.outputs.ISSUE_BODY }}" | grep '^\- \[x\]' | sed -E 's/^\- \[x\] //' | jq -R . | jq -s .)
          echo "TARGET_REPOS<<EOF" >> $GITHUB_OUTPUT
          echo "$REPOS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      repos: ${{ steps.extract_information.outputs.TARGET_REPOS }}
      ISSUE_NUMBER: ${{ steps.issue_details.outputs.ISSUE_NUMBER }}
      ISSUE_BODY: ${{ steps.issue_details.outputs.ISSUE_BODY }}

  operate-on-repos:
    needs: process-issue
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ${{ fromJson(needs.process-issue.outputs.repos) }}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "stable"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install mods using go install
        run: |
          go install github.com/charmbracelet/mods@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Run Codex Agent for repo
        id: codex_agent
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          echo "Installing @openai/codex..."
          # latest version has a bug of sanbox issue: https://github.com/openai/codex/issues/782
          npm i -g @openai/codex@0.1.2504251709

          COMMIT_MESSAGE="feat: Automated changes for issue #${{ needs.process-issue.outputs.ISSUE_NUMBER }} in repo ${{ matrix.repo }}"
          AGENT_SUMMARY=""
          AGENT_SUCCESS="false" # Default to failure

          echo "Configuring Git..."
          # Configure git user for commit
          # TODO: Use the actual bot user name and email
          git config --global user.name 'xuezhaojun'
          git config --global user.email 'zxue@redhat.com'

          echo "Cloning repository: xuezhaojun/$REPO_NAME..."
          ORG_REPO="${{ matrix.repo }}"
          REPO_NAME=$(echo "$ORG_REPO" | cut -d'/' -f2)
          git clone https://github.com/xuezhaojun/$REPO_NAME.git
          cd $REPO_NAME
          git fetch origin
          git checkout main || git checkout master
          git pull

          # Use a direct branch name based on issue number and repo
          BRANCH_NAME="code-agent-issue-${{ needs.process-issue.outputs.ISSUE_NUMBER }}-${{ matrix.repo }}-$(date -u +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"

          echo "--- Task Description ---"
          echo "${{ needs.process-issue.outputs.ISSUE_BODY }}"
          echo "------------------------"
          echo "Running codex for repo: ${{ matrix.repo }}..."

          # Run codex with the issue body as the prompt
          if codex --provider "$CODEX_PROVIDER" --model "$CODEX_MODEL" --approval-mode full-auto --quiet "${{ needs.process-issue.outputs.ISSUE_BODY }}"; then
            echo "Codex completed successfully."
            echo "Staging changes..."
            if git diff --quiet && git diff --staged --quiet; then
              echo "No changes detected by codex."
              AGENT_SUMMARY="Codex ran successfully but made no changes to the code."
              AGENT_SUCCESS="false"
              PR_TITLE="Automated changes for issue #${{ needs.process-issue.outputs.ISSUE_NUMBER }}"
              PR_BODY="No code changes detected."
            else
              echo "Changes detected. Staging..."
              git add .
              git diff --cached > diff.txt

              COMMIT_MSG=$(mods -f --model "$MODS_MODEL" "Generate a concise, conventional commit message (max 1 line, imperative mood, no explanation) based on this git diff. Only output the commit message, no explanation, no code block, no extra text." < diff.txt)
              COMMIT_MSG=$(echo "$COMMIT_MSG" | grep -v '```' | head -n 1)
              if [[ -z "$COMMIT_MSG" ]]; then
                COMMIT_MSG="chore: automated changes for issue #${{ needs.process-issue.outputs.ISSUE_NUMBER }}"
              fi

              echo "Committing changes..."
              git commit -s -m "$COMMIT_MSG"

              # Use issue title and link for PR
              PR_TITLE="${{ github.event.issue.title }}"
              ISSUE_URL="https://github.com/${{ github.repository }}/issues/${{ needs.process-issue.outputs.ISSUE_NUMBER }}"
              PR_BODY="[Related Issue]($ISSUE_URL)"
              echo "Pushing changes to origin..."
              git remote set-url origin https://xuezhaojun:${GITHUB_TOKEN}@github.com/xuezhaojun/$REPO_NAME.git
              git push origin "$BRANCH_NAME"

              # Generate summary using codex based on issue body and diff
              AGENT_SUMMARY=$(mods -f --model "$MODS_MODEL" "Given the git diff and issue body: ${{ needs.process-issue.outputs.ISSUE_BODY }}, generate a detailed summary in markdown format. Describe what was changed and why these changes were made. Only output the markdown, no explanation." < diff.txt)
              if [[ -z "$AGENT_SUMMARY" ]]; then
                AGENT_SUMMARY="Automated summary for code changes."
              fi

              AGENT_SUCCESS="true"
            fi
          else
            echo "Codex command failed."
            AGENT_SUMMARY="Codex command failed to execute."
            AGENT_SUCCESS="false"
            PR_TITLE="Automated changes for issue #${{ needs.process-issue.outputs.ISSUE_NUMBER }}"
            PR_BODY="Codex command failed."
          fi

          # Set outputs for subsequent steps
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "PR_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "AGENT_SUMMARY=$AGENT_SUMMARY" >> $GITHUB_OUTPUT
          echo "AGENT_SUCCESS=$AGENT_SUCCESS" >> $GITHUB_OUTPUT

        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.AGENT_GH_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Create Pull Request
        if: steps.codex_agent.outputs.AGENT_SUCCESS == 'true'
        run: |
          echo "Creating Pull Request..."
          ORG_REPO="${{ matrix.repo }}"
          ORG=$(echo "$ORG_REPO" | cut -d'/' -f1)
          REPO=$(echo "$ORG_REPO" | cut -d'/' -f2)
          # Always create PR to upstream repo, head is xuezhaojun:BRANCH_NAME
          gh pr create --repo "$ORG/$REPO" --base main --head "xuezhaojun:${{ steps.codex_agent.outputs.BRANCH_NAME }}" --title "${{ steps.codex_agent.outputs.PR_TITLE }}" --body "${{ steps.codex_agent.outputs.PR_BODY }}"
        env:
          GH_TOKEN: ${{ secrets.AGENT_GH_TOKEN }}

      - name: Post Summary Comment on Issue
        if: always()
        run: |
          echo "Posting summary comment..."
          SUMMARY="Codex Agent processing complete for Issue #${{ needs.process-issue.outputs.ISSUE_NUMBER }} in repo ${{ matrix.repo }}.\n\nSummary: ${{ steps.codex_agent.outputs.AGENT_SUMMARY }}"

          if [[ "${{ steps.codex_agent.outputs.AGENT_SUCCESS }}" == "true" ]]; then
            PR_URL=$(gh pr view ${{ steps.codex_agent.outputs.BRANCH_NAME }} --json url -q '.url' || echo "")
            if [[ -n "$PR_URL" ]]; then
              SUMMARY="${SUMMARY}\nPull Request created: ${PR_URL}"
            else
              SUMMARY="${SUMMARY}\nCould not retrieve Pull Request URL (it might still be creating or the branch push failed)."
            fi
          elif [[ "${{ steps.codex_agent.outputs.AGENT_SUCCESS }}" == "false" && -n "${{ steps.codex_agent.outputs.AGENT_SUMMARY }}" ]]; then
             # If failed, but we have a summary, just show the summary
             SUMMARY="Codex Agent processing failed for Issue #${{ needs.process-issue.outputs.ISSUE_NUMBER }} in repo ${{ matrix.repo }}.\n\nSummary: ${{ steps.codex_agent.outputs.AGENT_SUMMARY }}"
          else
             # Generic failure message
             SUMMARY="Codex Agent processing failed for Issue #${{ needs.process-issue.outputs.ISSUE_NUMBER }} in repo ${{ matrix.repo }}. Please check the workflow logs for details."
          fi

          gh issue comment ${{ needs.process-issue.outputs.ISSUE_NUMBER }} --repo "${{ github.repository }}" --body "$SUMMARY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
